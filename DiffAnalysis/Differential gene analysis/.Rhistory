demo()
install.packages("data.table")
Sys.which("make")
Sys.which("make")
Sys.which("make")
install.packages("data.table")
install.packages("magrittr")
library(data.table)
library(magrittr)
Sys.which(make)
Sys.which("make")
Sys.which("make")
R.version
install.packages("ape",repos="https://cloud.r-project.org",quiet=TRUE)
install.packages("phangorn",repos="https://cloud.r-project.org",quiet=TRUE)
Rscript cfml.results example.txt
R cfml.results example
cfml_results.R example.fasta.labelled_tree.newick
demo()
help()
### Read a FASTA file
read.fasta <- function(fname, as.char=FALSE) {
a = scan(fname,what=character(0),sep="\n",quiet=TRUE,na.strings="")
wh = as.vector(sapply(a,substr,1,1))==">"
labs = substr(as.character(a[wh]),2,1000);
lseqs = a[!wh]
nlines = length(lseqs)%/%length(labs)
n = length(lseqs)%/%nlines
seqs = rep("",n);
names(seqs) <- labs
for(i in 1:n) {
ibeg = (i-1)*nlines+1
iend = i*nlines
seqs[i] = paste(lseqs[ibeg:iend],collapse="")
}
seqlen = as.numeric(sapply(seqs,nchar))
if(length(seqlen)>1 & var(seqlen)>0) {
warning("Sequences have differing lengths");
mx = max(seqlen)
for(i in 1:n) seqs[i] = paste(seqs[i],paste(rep("-",mx-seqlen[i]),collapse=""),sep="")
}
L = as.numeric(nchar(seqs[1]))
SEQ = array("-",dim=c(n,L))
for(i in 1:n) SEQ[i,] = unlist(strsplit(seqs[i],""))
rownames(SEQ) <- labs;
if(as.char==TRUE) {
return(SEQ);
} else {
fSEQ = apply(toupper(SEQ),2,factor,levels=c("A","G","C","T"));
return(fSEQ);
}
}
install.packages("installr")
install.packages(installr)
install.packages("installr")
R version
R --version
R.version.string
install.packages("installr")
library(installr)
R.version.string
updateR()
updateR()
R.version.string
plot(graph)
g<-ggplot(chr1, aes(x = left_snp, y = mean)+ geom_point() + geom_smooth(method="lm"))
clear
install.packages("ggplot2")
ls
cd ..
exit
install.packages("ggplot2")
remove.packages(c("ggplot2", "data.table"))
install.packages('colorspace', dependencies = TRUE)
install.packages('ggplot2', dependencies = TRUE)
install.packages('data.table', dependencies = TRUE)
plot(g)
ls
gdPlot(aTrack, minBase=1, maxBase=11000)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install(version = "3.13")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install(version = "3.13")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install(version = "3.12")
require("rtracklayer")
install.packages("installr")
library(installr)
updateR()
updateR()
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("rtracklayer")
require("rtracklayer")
# read in the gff, example from import.gff:
# import a GFF V3 file
gff <- import.gff(system.file("tests", "NL03003.gff", package =
"rtracklayer"), version = "3")
{1:length(iranges)}
# the gff object contains an IRanges list with the intervals
# we need a function to convert to an AnnotationTrack  from an IRanges
object:
makeAnnotationTrackFromIRanges = function (iranges, dp=DisplayPars(ranges = "yellow", plotId=TRUE )) {
iranges.names = if (is.null(names(iranges)))
{1:length(iranges)}
else {names(iranges)}
# make some IDs
annotation = data.frame(start=iranges at start,
end=iranges at
start+iranges@width-1,
feature=paste("ranges"),  # there is no more feature information here
group=c(1:length(iranges)), # put every region in a different group
ID=iranges.names)
makeAnnotationTrack(regions=annotation, dp=dp)
}
# make some IDs
annotation = data.frame(start=iranges at start,
end=iranges at
start+iranges@width-1,
feature=paste("ranges"),  # there is no more feature information here
group=c(1:length(iranges)), # put every region in a different group
ID=iranges.names)
# the gff object contains an IRanges list with the intervals
# we need a function to convert to an AnnotationTrack  from an IRanges
object:
makeAnnotationTrackFromIRanges = function (iranges, dp=DisplayPars(ranges = "yellow", plotId=TRUE )) {
iranges.names = if (is.null(names(iranges)))
{1:length(iranges)}
else {names(iranges)}
# make some IDs
annotation = data.frame(start=iranges at start,
end=iranges at start+iranges@width-1,
feature=paste("ranges"),  # there is no more feature information here
group=c(1:length(iranges)), # put every region in a different group
ID=iranges.names)
makeAnnotationTrack(regions=annotation, dp=dp)
}
installed.packages
installed.packages()
installed.packages()
installed.packages()
help(rtracklayer)
??rtracklayer
gff
# Save the file.
dev.off()
# Plot the bar chart.
plot(v,type = "p", col = "red", xlab = "Genes", ylab = "RPKM",
main = "nookaew_cm")
# Save the file.
dev.off()
install.packages("data.table")
library(data.table)
# load Data
#do math in java, then output only necessary data into file
#RPKM = numReads / ( geneLength/1000 * totalNumReads/1,000,000 )
all<- fread("/RPKMall")
# Give the chart file a name.
png(file = "nookaew_cm.jpg")
# load Data
#do math in java, then output only necessary data into file
#RPKM = numReads / ( geneLength/1000 * totalNumReads/1,000,000 )
all<- fread("RPKMall")
# load Data
#do math in java, then output only necessary data into file
#RPKM = numReads / ( geneLength/1000 * totalNumReads/1,000,000 )
all<- fread("C:\Users\alex\gobi2021\bamfeatures\RPKMall")
# load Data
#do math in java, then output only necessary data into file
#RPKM = numReads / ( geneLength/1000 * totalNumReads/1,000,000 )
all<- fread("C:\\Users\\alex\\gobi2021\\bamfeatures\\RPKMall")
# load Data
#do math in java, then output only necessary data into file
#RPKM = numReads / ( geneLength/1000 * totalNumReads/1,000,000 )
all<- fread("C:\\Users\\alex\\gobi2021\\bamfeatures\\RPKMall")
nonpcr<-fread("C:\\Users\\alex\\gobi2021\\bamfeatures\\RPKMPCRO")
all$type<-"allreads"
nonpcr$type<-"nonpcr"
plotting <-rbind(all, nonpcr)
ggplot(plotting,aes(V1,fill = type)) + geom_density(alpha = 0.2) + scale_x_log10()
install.packages("ggplot2")
library(ggplot2)
ggplot(plotting,aes(V1,fill = type)) + geom_density(alpha = 0.2) + scale_x_log10()
p<-ggplot(plotting,aes(V1,fill = type)) + geom_density(alpha = 0.2) + scale_x_log10()
png("test.png")
print(p)
dev.off()
# load Data
#do math in java, then output only necessary data into file
#RPKM = numReads / ( geneLength/1000 * totalNumReads/1,000,000 )
all<- fread("C:\\Users\\alex\\gobi2021\\bamfeatures\\RPKMall")
# load Data
#do math in java, then output only necessary data into file
#RPKM = numReads / ( geneLength/1000 * totalNumReads/1,000,000 )
all<- fread("C:\\Users\\alex\\gobi2021\\bamfeatures\\RPKMall")
# load Data
install.packages("data.table")
library("data.table")
#do math in java, then output only necessary data into file
#RPKM = numReads / ( geneLength/1000 * totalNumReads/1,000,000 )
all<- fread("C:\\Users\\alex\\gobi2021\\bamfeatures\\RPKMall")
nonpcr<-fread("C:\\Users\\alex\\gobi2021\\bamfeatures\\RPKMPCRO")
all$type<-"allreads"
nonpcr$type<-"nonpcr"
plotting <-rbind(all, nonpcr)
p<-ggplot(plotting,aes(V1,fill = type)) + geom_density(alpha = 0.2) + scale_x_log10() + xlab("RPKM (log-scale)") + ggtitle("nookaew_cm")
intsall.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
# load Data
install.packages("data.table")
library("data.table")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
#do math in java, then output only necessary data into file
#RPKM = numReads / ( geneLength/1000 * totalNumReads/1,000,000 )
all<- fread("C:\\Users\\alex\\gobi2021\\bamfeatures\\RPKMall")
#do math in java, then output only necessary data into file
#RPKM = numReads / ( geneLength/1000 * totalNumReads/1,000,000 )
all<- fread("C:\\Users\\alex\\gobi2021\\bamfeatures\\RPKMall")
# load Data
install.packages("data.table")
library("data.table")
install.packages("ggplot2")
install.packages("ggplot2")
library("ggplot2")
#do math in java, then output only necessary data into file
#RPKM = numReads / ( geneLength/1000 * totalNumReads/1,000,000 )
all<- fread("C:\\Users\\alex\\gobi2021\\bamfeatures\\RPKMall")
nonpcr<-fread("C:\\Users\\alex\\gobi2021\\bamfeatures\\RPKMPCRO")
all$type<-"allreads"
nonpcr$type<-"nonpcr"
plotting <-rbind(all, nonpcr)
p<-ggplot(plotting,aes(V1,fill = type)) + geom_density(alpha = 0.2) + scale_x_log10() + xlab("RPKM (log-scale)") + ggtitle("nookaew_cm")
png("nookaew_cm.png")
print(p)
dev.off()
#do math in java, then output only necessary data into file
#RPKM = numReads / ( geneLength/1000 * totalNumReads/1,000,000 )
all<- fread("C:\\Users\\alex\\gobi2021\\bamfeatures\\RPKMall")
nonpcr<-fread("C:\\Users\\alex\\gobi2021\\bamfeatures\\RPKMPCRO")
all$type<-"allreads"
nonpcr$type<-"nonpcr"
plotting <-rbind(all, nonpcr)
p<-ggplot(plotting,aes(V1,fill = type)) + geom_density(alpha = 0.2) + scale_x_log10() + xlab("RPKM (log-scale)") + ggtitle("nookaew_cm")
png("hes_star.png")
print(p)
dev.off()
p<-ggplot(plotting,aes(V1,fill = type)) + geom_density(alpha = 0.2) + scale_x_log10() + xlab("RPKM (log-scale)") + ggtitle("hes_star_cm")
png("hes_star.png")
print(p)
dev.off()
# load Data
install.packages("data.table")
library("data.table")
install.packages("ggplot2")
library("ggplot2")
install.packages("ggplot2")
#do math in java, then output only necessary data into file
#RPKM = numReads / ( geneLength/1000 * totalNumReads/1,000,000 )
all<- fread("C:\\Users\\alex\\gobi2021\\bamfeatures\\ebna_hisat\\RPKMall")
nonpcr<-fread("C:\\Users\\alex\\gobi2021\\bamfeatures\\ebna_hisat\\RPKMPCRO")
all$type<-"allreads"
nonpcr$type<-"nonpcr"
plotting <-rbind(all, nonpcr)
p<-ggplot(plotting,aes(V1,fill = type)) + geom_density(alpha = 0.2) + scale_x_log10() + xlab("RPKM (log-scale)") + ggtitle("ebna_hisat")
png("ebna_hisat.png")
print(p)
dev.off()
#do math in java, then output only necessary data into file
#RPKM = numReads / ( geneLength/1000 * totalNumReads/1,000,000 )
all<- fread("C:\\Users\\alex\\gobi2021\\bamfeatures\\nookaew_cm\\RPKMall")
nonpcr<-fread("C:\\Users\\alex\\gobi2021\\bamfeatures\\nookaew_cm\\RPKMPCRO")
all$type<-"allreads"
nonpcr$type<-"nonpcr"
plotting <-rbind(all, nonpcr)
p<-ggplot(plotting,aes(V1,fill = type)) + geom_density(alpha = 0.2) + scale_x_log10() + xlab("RPKM (log-scale)") + ggtitle("nookaew_cm")
png("nookaew_cm.png")
print(p)
dev.off()
rm(list = ls())
hisatCounts = as.matrix(read.csv("C:\\Users\\alex\\gobi2021\\DiffAnalysis\\Differential gene analysis\\gene.counts.hisat", sep = "\t", row.names = "Geneid"))
starCounts = as.matrix(read.csv("C:\\Users\\alex\\gobi2021\\DiffAnalysis\\Differential gene analysis\\gene.counts.star", sep = "\t", row.names = "Geneid"))
#get dim and output
dim(hisatCounts)
head(hisatCounts)
dim(starCounts)
head(starCounts)
library("dplyr")
select = order(rowMeans(assay(cov_rlog)), decreasing = TRUE)[1:30]
pheatmap( assay(cov_rlog)[select, ],
scale = "row",
annotation_col = as.data.frame(
colData(cov_rlog)[, c("condition", "sample")] ))
#differential gene analysis
#-------------------------------------------------------------------------------
rm(list = ls())
install.packages("dslabs")
install.packages("data.table")
library
library
library
install.packages("dslabs")
install.packages("data.table")
install.packages("magrittr")
install.packages("tidyr")
install.packages("dplyr")
install.packages("magrittr")
install.packages("ggplot2")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("DESeq2")
library("dplyr")
library("DESeq2")
library("ggplot2")
#-------------------------------------------------------------------------------
#read in
hisat <- as.matrix(read.csv("C:\\Users\\alex\\gobi2021\\DiffAnalysis\\Differential gene analysis\\gene.counts.hisat", sep = "\t", row.names = "Geneid"))
star <- as.matrix(read.csv("C:\\Users\\alex\\gobi2021\\DiffAnalysis\\Differential gene analysis\\gene.counts.star", sep = "\t", row.names = "Geneid"))
listannot <- readr::read_delim("C:\\Users\\alex\\gobi2021\\DiffAnalysis\\Differential gene analysis\\sample.list", delim="\t")
#check dim and output
dim(hisat)
head(hisat)
dim(star)
head(star)
head(listannot)
listannot = mutate(listannot, condition = factor(condition),
sample = factor(sample))
with(listannot,
table(condition, sample))
#-------------------------------------------------------------------------------
#colnames(star)
#colnames(star) <- sub(".bam", "", colnames(star))
#colnames(star)
mt <- match(colnames(hisat), sub(".bam", "", colnames(star)))
#check na
stopifnot(!any(is.na(mt)))
cov <- DESeqDataSetFromMatrix(
countData <- hisat,
colData <- listannot,
design = ~ condition)
class(cov)
is(cov, "SummarizedExperiment")
cov
cov <- DESeq(cov)
res <- results(cov)
#check error?
res
res[order(res$padj), ] | head()
#-------------------------------------------------------------------------------
#p-value histogram
ggplot(as(res, "data.frame"), aes(x = pvalue)) + geom_histogram(binwidth = 0.01, fill = "Royalblue", boundary = 0)
#-------------------------------------------------------------------------------
#MA plot
plotMA(cov, ylim = c( -2, 2))
#-------------------------------------------------------------------------------
#PCA
cov_rlog = rlogTransformation(cov)
plotPCA(cov_rlog, intgroup = c("sample", "condition")) + coord_fixed()
#-------------------------------------------------------------------------------
#test
#heatmap
library("pheatmap")
select = order(rowMeans(assay(cov_rlog)), decreasing = TRUE)[1:30]
pheatmap( assay(cov_rlog)[select, ],
scale = "row",
annotation_col = as.data.frame(
colData(cov_rlog)[, c("condition", "sample")] ))
#-------------------------------------------------------------------------------
#p-value histogram
ggplot(as(res, "data.frame"), aes(x = pvalue)) + geom_histogram(binwidth = 0.01, fill = "Royalblue", boundary = 0)
#-------------------------------------------------------------------------------
#MA plot
plotMA(cov, ylim = c( -2, 2))
#-------------------------------------------------------------------------------
#PCA
cov_rlog = rlogTransformation(cov)
plotPCA(cov_rlog, intgroup = c("sample", "condition")) + coord_fixed()
setwd("C:/Users/alex/gobi2021/DiffAnalysis/Differential gene analysis")
